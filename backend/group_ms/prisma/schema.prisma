generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Group {
  id                Int                @id @default(autoincrement()) @unique
  name              String             
  description       String?
  photoUrl          String?
  bannerUrl         String?
  status            GroupStatus        @default(ACTIVE)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  createdBy         Int                // Ensure this references a user
  members           Member[]
  membershipRequests MembershipRequest[]
  blockedUsers      BlockedUser[]
  invitations       Invitation[]

  @@map("groups")
}


model Member {
  id        Int      @id @default(autoincrement())
  userId    Int      
  groupId   Int
  joinedAt  DateTime @default(now())
  role      MemberRole @default(MEMBER)
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade) // Add onDelete behavior

  @@unique([userId, groupId])
  @@map("members")
}

model MembershipRequest {
  id        Int       @id @default(autoincrement())
  userId    Int
  groupId   Int
  status    RequestStatus @default(PENDING)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  group     Group    @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
  @@map("membership_requests")
}

model BlockedUser {
  id        Int      @id @default(autoincrement())
  userId    Int
  groupId   Int
  reason    String?
  blockedAt DateTime @default(now())
  group     Group    @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
  @@map("blocked_users")
}

model Invitation {
  id        Int           @id @default(autoincrement())
  userId    Int
  groupId   Int
  status    InviteStatus  @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  group     Group         @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
  @@map("invitations")
}

enum GroupStatus {
  ACTIVE
  ARCHIVED
}

enum MemberRole {
  ADMIN
  MODERATOR  // Added moderator role
  MEMBER
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
}